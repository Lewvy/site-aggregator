// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addFeedAndFollow = `-- name: AddFeedAndFollow :one
WITH ins_feed AS (
    INSERT INTO feeds (url, name)
    VALUES ($1, $2)
    ON CONFLICT (url) DO UPDATE SET name = EXCLUDED.name
    RETURNING id, name
),
sel_feed AS (
    SELECT id, name FROM feeds WHERE url = $1
    UNION ALL
    SELECT id, name FROM ins_feed
    LIMIT 1
),
ins_follow AS (
    INSERT INTO feed_follows (user_id, feed_id)
    SELECT $3, id FROM sel_feed
    ON CONFLICT (user_id, feed_id) DO NOTHING
    RETURNING id
)
SELECT
    f.name AS feed_name,
    u.name AS user_name
FROM
    sel_feed f,
    users u
WHERE
    u.id = $3
LIMIT 1
`

type AddFeedAndFollowParams struct {
	Url  string
	Name string
	ID   uuid.UUID
}

type AddFeedAndFollowRow struct {
	FeedName string
	UserName string
}

func (q *Queries) AddFeedAndFollow(ctx context.Context, arg AddFeedAndFollowParams) (AddFeedAndFollowRow, error) {
	row := q.db.QueryRowContext(ctx, addFeedAndFollow, arg.Url, arg.Name, arg.ID)
	var i AddFeedAndFollowRow
	err := row.Scan(&i.FeedName, &i.UserName)
	return i, err
}

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH ins AS (
    INSERT INTO feed_follows (user_id, feed_id)
    VALUES ($1, $2)
    ON CONFLICT (user_id, feed_id) DO NOTHING
    RETURNING id, feed_follows.user_id, feed_follows.feed_id, feed_follows.created_at, feed_follows.updated_at
)
SELECT
    ff.id,
    ff.user_id,
    ff.feed_id,
    ff.created_at,
    ff.updated_at,
    u.name AS user_name,
    f.name AS feed_name
FROM
    (SELECT id, user_id, feed_id, created_at, updated_at FROM ins
     UNION ALL
     SELECT id, user_id, feed_id, created_at, updated_at
     FROM feed_follows WHERE feed_follows.user_id = $1 AND feed_follows.feed_id = $2) ff
JOIN users u ON ff.user_id = u.id
JOIN feeds f ON ff.feed_id = f.id
LIMIT 1
`

type CreateFeedFollowParams struct {
	UserID uuid.UUID
	FeedID int32
}

type CreateFeedFollowRow struct {
	ID        int32
	UserID    uuid.UUID
	FeedID    int32
	CreatedAt time.Time
	UpdatedAt time.Time
	UserName  string
	FeedName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow, arg.UserID, arg.FeedID)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserName,
		&i.FeedName,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, name)
VALUES($1, $2, $3, $4)
RETURNING id, created_at, updated_at, name
`

type CreateUserParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const dropRows = `-- name: DropRows :exec
TRUNCATE TABLE users RESTART IDENTITY CASCADE
`

func (q *Queries) DropRows(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, dropRows)
	return err
}

const getFeedByURL = `-- name: GetFeedByURL :one
SELECT id, created_at, updated_at, name, url, user_id FROM feeds WHERE url = $1
`

func (q *Queries) GetFeedByURL(ctx context.Context, url string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedByURL, url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT
    ff.id,
    ff.user_id,
    ff.feed_id,
    ff.created_at,
    ff.updated_at,
    u.name AS user_name,
    f.name AS feed_name
FROM
    feed_follows ff
JOIN users u ON ff.user_id = u.id
JOIN feeds f ON ff.feed_id = f.id
WHERE
    ff.user_id = $1
`

type GetFeedFollowsForUserRow struct {
	ID        int32
	UserID    uuid.UUID
	FeedID    int32
	CreatedAt time.Time
	UpdatedAt time.Time
	UserName  string
	FeedName  string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, userID uuid.UUID) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FeedID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserName,
			&i.FeedName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedNamesUserIsFollowing = `-- name: GetFeedNamesUserIsFollowing :many
SELECT
    f.name AS feed_name
FROM
    feed_follows ff
JOIN feeds f ON ff.feed_id = f.id
WHERE
    ff.user_id = $1
`

func (q *Queries) GetFeedNamesUserIsFollowing(ctx context.Context, userID uuid.UUID) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getFeedNamesUserIsFollowing, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var feed_name string
		if err := rows.Scan(&feed_name); err != nil {
			return nil, err
		}
		items = append(items, feed_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, name FROM users
WHERE name = $1
`

func (q *Queries) GetUser(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const insertFeed = `-- name: InsertFeed :one
INSERT INTO feeds (created_at, updated_at, name, url, user_id)
VALUES($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, name, url, user_id
`

type InsertFeedParams struct {
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
}

func (q *Queries) InsertFeed(ctx context.Context, arg InsertFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, insertFeed,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const listFeeds = `-- name: ListFeeds :many
SELECT feeds.name, feeds.url, users.name 
FROM feeds 
INNER JOIN users ON feeds.user_id = users.id
`

type ListFeedsRow struct {
	Name   string
	Url    string
	Name_2 string
}

func (q *Queries) ListFeeds(ctx context.Context) ([]ListFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, listFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFeedsRow
	for rows.Next() {
		var i ListFeedsRow
		if err := rows.Scan(&i.Name, &i.Url, &i.Name_2); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT name FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
